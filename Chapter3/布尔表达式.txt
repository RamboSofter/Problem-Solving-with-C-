当您来到人生的岔路口时，请好好把握。    --尤吉·贝拉
“正相反，”叮当弟接着说，“如果那是真的，那就可能是真的；如果那曾经是真的，它就是真的过；但是既然现在它不是真的，那么现在它就是假的。这是逻辑。”
 --刘易斯·卡洛尔，《爱丽丝镜中奇遇记》
 
 布尔表达式是求值为真(true)或假(false)的表达式，true 表示条件满足，false 表示条件不满足。
 布尔表达式可采取与算术表达式一样的方式求值。两者唯一的区别在于，算术表达式执行+、-、*和 / 等运算，结果是数字。相反，布尔表达式执行==和<等关系运算，以及&&、|| 和 ! 等布尔运算，结果是 true 或 false。
 最高的优先级(最先求值)  >> 最低的优先级(最后求值)
一元操作符+，-，++，--和!
二元算术操作符*，/，%
二元算术操作符+，-
布尔运算<，>，<=，>=
布尔运算==，!=
布尔运算&&
布尔运算||
具体说来，C++会将整数 1 转换成 true，将整数 0转换成false。编译器会将所有非 0的数视为 true，将 0 视为 false。
枚举类型是值用一组 int 类型的常量来定义的类型。枚举类型就像是包含了一组声明常量的列表。
定义枚举类型时可以使用任何 int值，并可在枚举类型中定义任何数量的常量。
简单地说，第一个枚举常量的默认值是 0，其余常量依次递增 1——除非显式指定了一个或者多个枚举常量的值
强枚举或枚举类:它避免了传统枚举存在的一些问题。例如，你可能不希望枚举具有整数的行为。另外，传统枚举具有全局作用域，所以不允许有两个相同的枚举值。为了定义强枚举，在 enum 后添加关键字 class 就可以了。枚举名称后添加两个冒号来限定要使用的枚举值。
enum class Days { Sun, Mon, Tue, Wed };
enum class Weather { Rain, Sun };
Days d = Days::Tue;
Weather w = Weather::Sun;
