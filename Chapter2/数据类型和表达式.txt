int 类型保存的就是整数。int 类型的值作为精确值来保存。
double 类型只能存储有限位数的数字，所以计算机将 double 类型的值保存为近似值。
与双精度类型对应的类型称为 double 类型，与单精度对应的则是 float 类型。C++还为带小数的数提供了第三种类型，即 long double 类型。
类型名称           占用的内存         取值范围                          精度
short(或 short int) 2 字节       -32 767～32 767                    (不适用)
int                 4 字节    -2 147 483 647～2 147 483 647         (不适用)
long(或 long int)   4 字节    -2 147 483 647～2 147 483 647         (不适用)
float               4 字节      约 10**-38～10**38                    7 位
double              8 字节      约 10**-308～10**308                  15 位
long double         10 字节     约 10-4932～104932                    19 位
类型名称 long 和 long int 代表同一个类型。所以，以下两个声明是等价的：
long bigTotal;
long int bigTotal;
类型名称 long 等价于 long int，而不是等价于 long double
用于表示整数的类型(比如 int 和其他类似的类型)统称为整数类型或者整型。用于表
示带小数点的数字的类型(比如 double 和其他类似类型)则统称为浮点类型或者浮点型。
部分 C++11 定宽整型:
类型名称        占用的内存       取值范围
int8_t            1字节        -128~127
uint8_t           1字节           0~255
int16_t           2字节        -32 768~32 767
uint16_t          2字节           0~65 535
int32_t           4字节      -2 147 483 648~2 147 483 647
uint32_t          4字节           0~4 294 967 295
int64_t           8字节     -9223372036854775808~9223372036854775807
uint64_t          8字节           0~18 446 744 073 709 551 615
long long       至少 8 字节
 auto 类型，能根据等号右侧的表达式推断变量类型。例如，以下代码定义名为 x 的变量，它的数据类型由 expression 的求值结果决定。
auto x = expression;
增加了判断变量或表达式类型的功能。decltype (expr)是变量或表达式expr 的已声明类型，可在声明新变量时使用。例如：
int x = 10;
decltype (x*3.5) y;
上述代码声明 y 的类型和 x*3.5 一样。表达式 x*3.5 的结果是 double，所以 y 被声明为 double。
char(character 的缩写)类型的值表示单独一个符号，比如字母、数字或标点符号。这种类型的值称为字符。
bool 类型的表达式称为布尔(Boolean)表达式
使用 string 类必须先包含 string 库：#include <string>
声明 string 类型的变量和声明 int 或 double 类型的变量一样。
操作符包括+(加)、-(减)、*(乘)和/(除),%得到余
向负 int值应用/和%操作符的结果因 C++实现而异。所以，为确保程序的可移植性，只有在确定两个 int 都非负时，才为它们使用操作符/和%
